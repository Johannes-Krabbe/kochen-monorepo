name: Build and Deploy Server

on:
  push:
    branches: 
      - main

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
    - name: Setup SSH connection to server
      run: |
        mkdir -p ~/.ssh
        echo "${{ secrets.SSH_PRIVATE_KEY }}" > ~/.ssh/id_rsa
        chmod 600 ~/.ssh/id_rsa
        ssh-keyscan -H ${{ secrets.SERVER_HOST }} >> ~/.ssh/known_hosts

    - name: Connect to server and build Docker image
      run: |
        ssh -o StrictHostKeyChecking=no ${{ secrets.SSH_USER }}@${{ secrets.SERVER_HOST }} << 'EOF'
          # Clone or update the repository
          if [ -d "kochen-monorepo" ]; then
            cd kochen-monorepo
            git fetch origin
            git reset --hard origin/main
          else
            git clone https://github.com/johannes-krabbe/kochen-monorepo.git
            cd kochen-monorepo
          fi

          # Build the Docker image
          cd server
          docker build -t johanneskrabbe/kochen-server:latest .
          docker tag johanneskrabbe/kochen-server:latest johanneskrabbe/kochen-server:${{ github.sha }}

          # Login to Docker Hub and push
          echo "${{ secrets.DOCKERHUB_TOKEN }}" | docker login -u "${{ secrets.DOCKERHUB_USERNAME }}" --password-stdin
          docker push johanneskrabbe/kochen-server:latest
          docker push johanneskrabbe/kochen-server:${{ github.sha }}

          # Cleanup
          docker logout
        EOF

    - name: Cleanup SSH
      if: always()
      run: rm -f ~/.ssh/id_rsa

  deploy:
    runs-on: ubuntu-latest
    needs: build

    steps:
    - name: Setup SSH connection to server
      run: |
        mkdir -p ~/.ssh
        echo "${{ secrets.SSH_PRIVATE_KEY }}" > ~/.ssh/id_rsa
        chmod 600 ~/.ssh/id_rsa
        ssh-keyscan -H ${{ secrets.SERVER_HOST }} >> ~/.ssh/known_hosts

    - name: Deploy with docker compose
      run: |
        ssh -o StrictHostKeyChecking=no ${{ secrets.SSH_USER }}@${{ secrets.SERVER_HOST }} << 'EOF'
          cd kochen-monorepo

          # Copy environment file
          cd infra/server
          cp ~/setup/.env .

          # Login to Docker Hub
          echo "${{ secrets.DOCKERHUB_TOKEN }}" | docker login -u "${{ secrets.DOCKERHUB_USERNAME }}" --password-stdin

          # Pull latest image
          docker compose pull kochen-server

          # Start services (database first)
          docker compose up -d kochen-postgres

          # Wait for database to be ready
          until docker run --rm --network kochen-server_default postgres:latest pg_isready -h kochen-postgres -p 5432; do
            echo "Waiting for postgres..."
            sleep 1
          done

          # Run migrations
          docker run --rm --network kochen-server_default \
            --env-file .env \
            -e POSTGRES_SSLMODE=disable \
            johanneskrabbe/kochen-server:latest \
            ./migrator

          # Start the server
          docker compose up -d kochen-server

          # Clean up old images
          docker image prune -f

          # Logout from Docker Hub
          docker logout
        EOF

    - name: Cleanup SSH
      if: always()
      run: rm -f ~/.ssh/id_rsa
