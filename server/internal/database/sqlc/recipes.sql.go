// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: recipes.sql

package database

import (
	"context"

	"github.com/google/uuid"
	"github.com/sqlc-dev/pqtype"
)

const createRecipe = `-- name: CreateRecipe :one
INSERT INTO recipes (id, owner_id, visibility, slug, content)
VALUES ($1, $2, $3, $4, $5)
RETURNING id, owner_id, visibility, slug, content, created_at, updated_at
`

type CreateRecipeParams struct {
	ID         uuid.UUID
	OwnerID    uuid.UUID
	Visibility Visibility
	Slug       string
	Content    pqtype.NullRawMessage
}

func (q *Queries) CreateRecipe(ctx context.Context, arg CreateRecipeParams) (Recipe, error) {
	row := q.db.QueryRowContext(ctx, createRecipe,
		arg.ID,
		arg.OwnerID,
		arg.Visibility,
		arg.Slug,
		arg.Content,
	)
	var i Recipe
	err := row.Scan(
		&i.ID,
		&i.OwnerID,
		&i.Visibility,
		&i.Slug,
		&i.Content,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getRecipeBySlug = `-- name: GetRecipeBySlug :one
SELECT id, owner_id, visibility, slug, content, created_at, updated_at
FROM recipes
WHERE slug = $1
`

func (q *Queries) GetRecipeBySlug(ctx context.Context, slug string) (Recipe, error) {
	row := q.db.QueryRowContext(ctx, getRecipeBySlug, slug)
	var i Recipe
	err := row.Scan(
		&i.ID,
		&i.OwnerID,
		&i.Visibility,
		&i.Slug,
		&i.Content,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
